
import { expect } from "chai";
import { BigNumber } from "ethers";
import { deployments, ethers, getNamedAccounts} from "hardhat";
import "hardhat-deploy-ethers";

describe("DexTwoExploit", async () =>{

    it("Should success being exploited", async () =>{
        await deployments.fixture(["DexTwo","SwappableTokenTwo","DexTwoExploit"])
        const {deployer} = await getNamedAccounts();
        const dexTwoDeployment=await deployments.get('DexTwo')
        const swappableTokenTwoADeployment=await deployments.get('Swappable Token Two A')
        const swappableTokenTwoBDeployment=await deployments.get('Swappable Token Two B')
        const dexTwoExploitDeployment=await deployments.get('DexTwoExploit')
        const deployerAcc=await ethers.getSigner(deployer)
        //const exploiterAcc=await ethers.getSigner(exploiter)

        const dexTwo = await ethers.getContractAt('DexTwo',dexTwoDeployment.address)
        const swappableTokenTwoA = await ethers.getContractAt('SwappableTokenTwo',swappableTokenTwoADeployment.address)
        const swappableTokenTwoB = await ethers.getContractAt('SwappableTokenTwo',swappableTokenTwoBDeployment.address)
        const dexTwoExploit=await ethers.getContractAt('DexTwoExploit',dexTwoExploitDeployment.address)
        

        //Set token to dex
        await dexTwo.connect(deployerAcc).setTokens(swappableTokenTwoA.address,swappableTokenTwoB.address)

        // Give 100 token to dex        
        await swappableTokenTwoA.connect(deployerAcc).transfer(dexTwo.address,BigNumber.from(`100`))
        await swappableTokenTwoB.connect(deployerAcc).transfer(dexTwo.address,BigNumber.from(`100`))

        //Now we exploit the contract
        await dexTwoExploit.exploit()

        expect((await dexTwoExploit.getDexToken1Balance()).eq(0) && (await dexTwoExploit.getDexToken2Balance()).eq(0),"Non of the tokens were drained").to.be.true
    });
});
