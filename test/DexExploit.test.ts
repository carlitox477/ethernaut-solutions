
import { expect } from "chai";
import { BigNumber } from "ethers";
import { deployments, ethers, getNamedAccounts} from "hardhat";
import "hardhat-deploy-ethers";

describe("DexExploit", async () =>{

    it("Should success being exploited", async () =>{
        await deployments.fixture(["Dex","SwappableToken","DexExploit"])
        const {deployer} = await getNamedAccounts();
        const dexDeployment=await deployments.get('Dex')
        const swappableTokenADeployment=await deployments.get('Swappable Token A')
        const swappableTokenBDeployment=await deployments.get('Swappable Token B')
        const dexExploitDeployment=await deployments.get('DexExploit')
        const deployerAcc=await ethers.getSigner(deployer)
        //const exploiterAcc=await ethers.getSigner(exploiter)

        const dex = await ethers.getContractAt('Dex',dexDeployment.address)
        const swappableTokenA = await ethers.getContractAt('SwappableToken',swappableTokenADeployment.address)
        const swappableTokenB = await ethers.getContractAt('SwappableToken',swappableTokenBDeployment.address)
        const dexExploit=await ethers.getContractAt('DexExploit',dexExploitDeployment.address)
        
        // Give 10 token to exploiter
        await swappableTokenA.connect(deployerAcc).transfer(dexExploit.address,BigNumber.from(`10`))
        await swappableTokenB.connect(deployerAcc).transfer(dexExploit.address,BigNumber.from(`10`))

        //Set token to dex
        await dex.connect(deployerAcc).setTokens(swappableTokenA.address,swappableTokenB.address)

        // Give 100 token to dex        
        await swappableTokenA.connect(deployerAcc).transfer(dex.address,BigNumber.from(`100`))
        await swappableTokenB.connect(deployerAcc).transfer(dex.address,BigNumber.from(`100`))

        //Now we exploit the contract
        await dexExploit.exploit()

        expect((await dexExploit.getDexToken1Balance()).eq(0) || (await dexExploit.getDexToken2Balance()).eq(0),"Non of the tokens were drained").to.be.true
    });
});
